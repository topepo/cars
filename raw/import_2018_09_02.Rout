
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.0.0     ✔ purrr   0.2.5
✔ tibble  1.4.2     ✔ dplyr   0.7.6
✔ tidyr   0.8.1     ✔ stringr 1.3.1
✔ readr   1.1.1     ✔ forcats 0.3.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(fs)
> library(sessioninfo)
> 
> # Download source data, unzip, and rename file with date stamp------------------
> 
> # Make this a local path if you want to save the files, 
> #  otherwise use path_temp()
> 
> working_file_path <- path_temp()
> destination_path <- getwd()
> 
> date_stamp <- format(Sys.Date(), "_%Y_%m_%d")
> date_path <- substring(date_stamp, 2)
> 
> data_url <- "https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip"
> 
> target_zip_file <- path(working_file_path, "raw.zip")
> 
> download.file(url = data_url, destfile = target_zip_file)
trying URL 'https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip'
Content type 'application/x-zip-compressed' length 1484344 bytes (1.4 MB)
==================================================
downloaded 1.4 MB

> 
> dir_info(working_file_path) %>% 
+   filter(type == "file") %>% 
+   select(path, type, size, modification_time)
# A tibble: 1 x 4
  path                                                                type 
  <fs::path>                                                          <fct>
1 /var/folders/lb/xhxqmcrd7gv302_b1pdfykh80000gn/T/RtmpkvzsVj/raw.zip file 
# ... with 2 more variables: size <fs::bytes>, modification_time <dttm>
> 
> # get file name from inside zip
> zip_info <- unzip(target_zip_file, list = TRUE)
> 
> unzip(target_zip_file, exdir = working_file_path)
> 
> dir_info(working_file_path) %>% 
+   filter(type == "file") %>% 
+   select(path, type, size, modification_time)
# A tibble: 2 x 4
  path                                                                     type 
  <fs::path>                                                               <fct>
1 /var/folders/lb/xhxqmcrd7gv302_b1pdfykh80000gn/T/RtmpkvzsVj/raw.zip      file 
2 /var/folders/lb/xhxqmcrd7gv302_b1pdfykh80000gn/T/RtmpkvzsVj/vehicles.csv file 
# ... with 2 more variables: size <fs::bytes>, modification_time <dttm>
> 
> new_file_name <- 
+   gsub("\\.csv$", paste0("_raw", date_stamp, "\\.csv"), zip_info$Name)
> 
> file_move(
+   path(working_file_path, zip_info$Name),
+   path(working_file_path, new_file_name)
+ )
> 
> dir_info(working_file_path) %>% 
+   filter(type == "file") %>% 
+   select(path, type, size, modification_time)
# A tibble: 2 x 4
# ... with 4 more variables: path <fs::path>, type <fct>, size <fs::bytes>,
#   modification_time <dttm>
> 
> # Read in data, remove unwanted variables, and make some new columns -----------
> 
> # helpful resources
> # https://www.fueleconomy.gov/feg/download.shtml
> # https://www.fueleconomy.gov/feg/ws/index.shtml
> 
> car_data <- 
+   read_csv(path(working_file_path, new_file_name), guess_max = 30000) %>%
+   dplyr::select(
+     -barrels08,  -barrelsA08,  -charge120,  -charge240,  -city08,  -cityA08,  
+     -cityCD,  -cityE,  -cityUF,  -co2,  -co2A,  -co2TailpipeAGpm,  
+     -co2TailpipeGpm,  -comb08,  -combA08,  -combE,  -combinedCD,  
+     -combinedUF, -engId, -feScore,  -fuelCost08,  -fuelCostA08, -trans_dscr,  
+     -ghgScore,  -ghgScoreA,  -highway08,  -highway08U,  
+     -highwayA08,  -highwayA08U,  -highwayCD,  -highwayE,  -highwayUF,
+     -id, -mpgData, -range,  -rangeCity,  -rangeCityA,  -rangeHwy,  -rangeHwyA,
+     -UCity,  -UCityA,  -UHighway,  -UHighwayA, -youSaveSpend,  -guzzler,
+     -atvType,  -rangeA,  -evMotor,  -mfrCode,  -c240Dscr,  
+     -charge240b,  -c240bDscr,  -createdOn,  -modifiedOn,  -phevCity,  -phevHwy,  
+     -phevComb, -fuelType1, -fuelType2, -phevBlended
+   ) %>%
+   dplyr::filter(year >= 2015) %>%
+   # A lot of formatting factor levels to get rid of special chars and punct
+   mutate(
+     drive = gsub("([[:punct:]])", "", drive),
+     drive = gsub(" ", "_", drive),
+     drive = gsub("4", "four", drive),
+     drive = gsub("-", "_", drive),
+     drive = gsub("_(A1)", "", drive, fixed = TRUE),
+     
+     fuelType = gsub(" ", "_", fuelType),
+     
+     # Engine descriptor info ; there can be multiple values so make indicators
+     # for the most prevelant values.  
+     eng_dscr = gsub("Stop/Start", "Stop-Start", eng_dscr, fixed = TRUE),
+     spark_ignited_direct_injection  = ifelse(grepl("SIDI", eng_dscr), 1, 0),
+     flexible_fuel = ifelse(grepl("FFV", eng_dscr), 1, 0),
+     plug_in_hybrid = ifelse(grepl("PHEV", eng_dscr), 1, 0),
+     hybrid = ifelse(grepl("Hybrid", eng_dscr), 1, 0), # comb all hybrid types
+     port_fuel_injection = ifelse(grepl("PFI", eng_dscr), 1, 0),
+     hellcat = ifelse(grepl("Hellcat", eng_dscr), 1, 0),
+     startStop = ifelse(
+       startStop == "Y" | grepl("stop-start", tolower(eng_dscr)), 
+       1, 0),
+     ieloop = ifelse(grepl("i-ELOOP", eng_dscr), 1, 0),
+     partial_zero_emissions = ifelse(grepl("PZEV", eng_dscr), 1, 0),
+     eco = ifelse(grepl("Eco", eng_dscr), 1, 0),
+     z06 = ifelse(grepl("Z06", eng_dscr), 1, 0),
+     zr1 = ifelse(grepl("ZR1", eng_dscr), 1, 0),
+     
+     # More cleanup
+     VClass = gsub(" - ", "_", VClass),
+     VClass = gsub(",", "", VClass),
+     VClass = gsub(" ", "_", VClass),
+     
+     trany = gsub("[[:punct:]]", "", trany),
+     trany = gsub(" ", "_", trany),
+     
+     make = gsub("[[:punct:]]", "_", make),
+     make = gsub(" ", "_", make),
+     
+     turbo_charged = ifelse(!is.na(tCharger), 1, 0),
+     super_charged = ifelse(!is.na(sCharger), 1, 0),
+     
+     # For non-combustion engines
+     cylinders = ifelse(is.na(cylinders), 0, cylinders),
+     displ = ifelse(is.na(displ), 0, displ)
+     
+   ) 
Parsed with column specification:
cols(
  .default = col_double(),
  city08 = col_integer(),
  cityA08 = col_integer(),
  co2 = col_integer(),
  co2A = col_integer(),
  comb08 = col_integer(),
  combA08 = col_integer(),
  cylinders = col_integer(),
  drive = col_character(),
  engId = col_integer(),
  eng_dscr = col_character(),
  feScore = col_integer(),
  fuelCost08 = col_integer(),
  fuelCostA08 = col_integer(),
  fuelType = col_character(),
  fuelType1 = col_character(),
  ghgScore = col_integer(),
  ghgScoreA = col_integer(),
  highway08 = col_integer(),
  highwayA08 = col_integer(),
  hlv = col_integer()
  # ... with 32 more columns
)
See spec(...) for full column specifications.
> 
> # In case you want to look at engine descriptions ------------------------------
> 
> # eng_descr <- strsplit(car_data$eng_dscr, ";")
> # eng_descr <- unlist(eng_descr)
> # eng_descr <- eng_descr[!is.na(eng_descr)]
> # eng_descr <- gsub("^\\s+|\\s+$", "", eng_descr)
> # sort(table(eng_descr))
> 
> # Remove replicate data for a car config (defined in `group_by` below) ---------
> 
> duplicates_removed <- 
+   car_data %>%
+   # If the car has not changed from year-to-year, it is listed in multiple rows.
+   # We keep the first instance of that car.   
+   group_by(
+     make, model, displ, eng_dscr, trany, fuelType, turbo_charged, super_charged,
+     comb08U, combA08U, comb08U, combA08U
+   ) %>% 
+   arrange(year) %>%
+   slice(1) 
> 
> # Check to see of there are cars that are jointly marketed and have the 
> # same info for different manufacturers
> check_multiple <- 
+   duplicates_removed %>%
+   # There are cars that are jointly marketed and have the same info for 
+   # different manufacturers
+   group_by(
+     year, model, displ, eng_dscr, trany, fuelType, turbo_charged, super_charged
+   ) %>% 
+   count() %>%
+   arrange(desc(n)) %>%
+   dplyr::filter(n > 1)
> 
> check_multiple %>% nrow()
[1] 0
> 
> 
> # Take the per-row maximum mpg ------------------------------------------------
> 
> max_mpg_per_row <- 
+   duplicates_removed %>%
+   ungroup() %>%
+   mutate(
+     city = ifelse(city08U > cityA08U, city08U, cityA08U),
+     comb = ifelse(comb08U > combA08U, comb08U, combA08U),
+   ) %>%
+   select(-city08U, -cityA08U, -comb08U, -combA08U)
> 
> # check to make sure there is one row per car config (without fuel type)
> check_one_config_per_row <- 
+   max_mpg_per_row %>%
+   group_by(
+     year, make, model, displ, eng_dscr, trany, turbo_charged, super_charged,
+     city, comb
+   ) %>% 
+   count() %>%
+   arrange(desc(n)) %>%
+   dplyr::filter(n > 1)
> 
> check_one_config_per_row %>% nrow()
[1] 0
> 
> # Rename and select some variables; make factors -------------------------------
> 
> final_data <-
+   max_mpg_per_row %>%
+   dplyr::rename(
+     transmission = trany,
+     car_class = VClass,
+     fuel_type = fuelType,
+     hatch_lug_vol = hlv,
+     hatch_pas_vol = hpv,
+     two_door_pass_vol = pv2,
+     four_door_pass_vol = pv4,
+     two_door_lug_vol = lv2,
+     four_door_lug_vol = lv4,
+     start_stop = startStop,
+     eng_displ = displ
+   ) %>%
+   mutate(
+     drive = as.factor(drive),
+     make = as.factor(make),
+     car_class = as.factor(car_class),
+     transmission = as.factor(transmission)
+   ) %>%
+   # remove old columns
+   dplyr::select(-eng_dscr, -tCharger, -sCharger) 
> 
> # Get the number of replicates per config with and w/o gas data ----------------
> 
> # rnow() should be 0
> 
> final_num_config_gas <- 
+   final_data %>%
+   group_by(
+     year, make, model, eng_displ, transmission, turbo_charged, super_charged,
+     flexible_fuel, spark_ignited_direct_injection, hybrid, port_fuel_injection,
+     hellcat, start_stop, ieloop, partial_zero_emissions, eco, z06, zr1, drive, 
+     city, comb
+   ) %>% 
+   count() %>%
+   arrange(desc(n)) %>%
+   dplyr::filter(n > 1)
> 
> final_num_config_gas %>% nrow()
[1] 0
> 
> final_num_config <- 
+   final_data %>%
+   group_by(
+     year, make, model, eng_displ, transmission, turbo_charged, super_charged,
+     flexible_fuel, spark_ignited_direct_injection, hybrid, port_fuel_injection,
+     hellcat, start_stop, ieloop, partial_zero_emissions, eco, z06, zr1, drive
+   ) %>% 
+   count() %>%
+   arrange(desc(n)) %>%
+   dplyr::filter(n > 1)
> 
> final_num_config_gas %>% nrow()
[1] 0
> 
> # Check for completeness 
> sum(!complete.cases(final_data))
[1] 0
> 
> # Training/Test Splits ---------------------------------------------------------
> 
> # Create test set based on the most recent year's data. Combine years if there
> # are not at least min_test_n cars in the latest year. 
> 
> min_test_n <- 250
> 
> trn_stop_year <- 
+   car_data %>%
+   group_by(year) %>% 
+   count() %>%
+   ungroup() %>%
+   arrange(desc(year)) %>%
+   mutate(running_n = cumsum(n)) %>%
+   dplyr::filter(running_n >= min_test_n) %>%
+   slice(2) %>%
+   pull(year)
> 
> # Save the data with city as the outcome ---------------------------------------
> 
> car_data <- 
+   final_data %>%
+   dplyr::rename(mpg = city) %>%
+   select(-comb)
> 
> car_train <- car_data %>%
+   filter(year <= trn_stop_year)
> 
> car_test <- car_data %>%
+   filter(year > trn_stop_year)
> 
> new_data_path <- path(destination_path, paste0(date_path, "_city"))
> 
> dir_create(new_data_path)
> 
> save(car_data, file = path(new_data_path, "car_data.RData"))
> save(car_train, car_test, file = path(new_data_path, "car_data_splits.RData"))
> 
> # Save the data with combined as the outcome -----------------------------------
> 
> car_data <- 
+   final_data %>%
+   dplyr::rename(mpg = comb) %>%
+   select(-city)
> 
> car_train <- car_data %>%
+   filter(year <= trn_stop_year)
> 
> car_test <- car_data %>%
+   filter(year > trn_stop_year)
> 
> new_data_path <- path(destination_path, paste0(date_path, "_combined"))
> 
> dir_create(new_data_path)
> 
> save(car_data, file = path(new_data_path, "car_data.RData"))
> save(car_train, car_test, file = path(new_data_path, "car_data_splits.RData"))
> 
> # Save raw data file------------------------------------------------------------
> 
> file_move(
+   path(working_file_path, new_file_name),
+   path(destination_path, "raw", new_file_name)
+ )
> 
> # Package versions -------------------------------------------------------------
> 
> session_info()
─ Session info ───────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.5.0 (2018-04-23)
 os       macOS High Sierra 10.13.6   
 system   x86_64, darwin15.6.0        
 ui       X11                         
 language (EN)                        
 collate  en_US.UTF-8                 
 tz       America/New_York            
 date     2018-09-02                  

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version date       source         
 assertthat    0.2.0   2017-04-11 CRAN (R 3.5.0) 
 backports     1.1.2   2017-12-13 CRAN (R 3.5.0) 
 bindr         0.1.1   2018-03-13 CRAN (R 3.5.0) 
 bindrcpp    * 0.2.2   2018-03-29 CRAN (R 3.5.0) 
 broom         0.5.0   2018-07-17 CRAN (R 3.5.0) 
 cellranger    1.1.0   2016-07-27 CRAN (R 3.5.0) 
 cli           1.0.0   2017-11-05 CRAN (R 3.5.0) 
 clisymbols    1.2.0   2017-05-21 CRAN (R 3.5.0) 
 colorspace    1.3-2   2016-12-14 CRAN (R 3.5.0) 
 crayon        1.3.4   2017-09-16 CRAN (R 3.5.0) 
 dplyr       * 0.7.6   2018-06-29 CRAN (R 3.5.0) 
 fansi         0.2.3   2018-05-06 CRAN (R 3.5.0) 
 forcats     * 0.3.0   2018-02-19 CRAN (R 3.5.0) 
 fs          * 1.2.2   2018-03-21 cran (@1.2.2)  
 ggplot2     * 3.0.0   2018-07-03 cran (@3.0.0)  
 glue          1.3.0   2018-07-17 CRAN (R 3.5.0) 
 gtable        0.2.0   2016-02-26 CRAN (R 3.5.0) 
 haven         1.1.1   2018-01-18 CRAN (R 3.5.0) 
 hms           0.4.2   2018-03-10 CRAN (R 3.5.0) 
 httr          1.3.1   2017-08-20 CRAN (R 3.5.0) 
 jsonlite      1.5     2017-06-01 CRAN (R 3.5.0) 
 lattice       0.20-35 2017-03-25 CRAN (R 3.5.0) 
 lazyeval      0.2.1   2017-10-29 CRAN (R 3.5.0) 
 lubridate     1.7.4   2018-04-11 CRAN (R 3.5.0) 
 magrittr      1.5     2014-11-22 CRAN (R 3.5.0) 
 modelr        0.1.2   2018-05-11 cran (@0.1.2)  
 munsell       0.5.0   2018-06-12 cran (@0.5.0)  
 nlme          3.1-137 2018-04-07 CRAN (R 3.5.0) 
 pillar        1.3.0   2018-07-14 cran (@1.3.0)  
 pkgconfig     2.0.1   2017-03-21 CRAN (R 3.5.0) 
 plyr          1.8.4   2016-06-08 CRAN (R 3.5.0) 
 purrr       * 0.2.5   2018-05-29 cran (@0.2.5)  
 R6            2.2.2   2017-06-17 CRAN (R 3.5.0) 
 Rcpp          0.12.18 2018-07-23 cran (@0.12.18)
 readr       * 1.1.1   2017-05-16 CRAN (R 3.5.0) 
 readxl        1.1.0   2018-04-20 CRAN (R 3.5.0) 
 rlang         0.2.2   2018-08-16 CRAN (R 3.5.0) 
 rstudioapi    0.7     2017-09-07 CRAN (R 3.5.0) 
 rvest         0.3.2   2016-06-17 CRAN (R 3.5.0) 
 scales        1.0.0   2018-08-09 cran (@1.0.0)  
 sessioninfo * 1.0.0   2017-06-21 CRAN (R 3.5.0) 
 stringi       1.2.3   2018-06-12 CRAN (R 3.5.0) 
 stringr     * 1.3.1   2018-05-10 cran (@1.3.1)  
 tibble      * 1.4.2   2018-01-22 CRAN (R 3.5.0) 
 tidyr       * 0.8.1   2018-05-18 cran (@0.8.1)  
 tidyselect    0.2.4   2018-02-26 CRAN (R 3.5.0) 
 tidyverse   * 1.2.1   2017-11-14 CRAN (R 3.5.0) 
 utf8          1.1.4   2018-05-24 cran (@1.1.4)  
 withr         2.1.2   2018-03-15 CRAN (R 3.5.0) 
 xml2          1.2.0   2018-01-24 CRAN (R 3.5.0) 
> 
> if (!interactive())
+   q("no")
> proc.time()
   user  system elapsed 
  3.975   0.265   5.979 
